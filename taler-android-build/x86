#!/usr/bin/env bash

set -eu -o pipefail

scriptdir="$(cd "$(dirname "${BASH_SOURCE[0]}")" >/dev/null 2>&1 && pwd)"
cd $scriptdir

NDK=$1

API_LEVEL=21
BUILD_HOST_TAG='linux-x86_64'
TOOLCHAIN_DIR=$NDK/toolchains/llvm/prebuilt/$BUILD_HOST_TAG/

if [[ ! -d "$NDK" ]]; then
  echo "Android NDK directory '$NDK' invalid"
  exit 1
fi

if [[ ! -d "$TOOLCHAIN_DIR" ]]; then
  echo "Toolchain directory '$TOOLCHAIN_DIR' invalid"
  exit 1
fi

##########
# Build V8
##########

./build-android-v8 "$NDK" x86

cd $scriptdir/..
x=$scriptdir/compiled/x86/
mkdir -p $x
cp deps/v8/out.gn/android-x86/*.so $x/


############
# Build Node
############

cd $scriptdir

export DEST_CPU_ARCH=x86

# The naming of these isn't very consistent, as some tools start with arm,
# others with arm7a.
export AR=$TOOLCHAIN_DIR/bin/i686-linux-android-ar
export LD=$TOOLCHAIN_DIR/bin/i686-linux-android-ld
export RANLIB=$TOOLCHAIN_DIR/bin/i686-linux-android-ranlib
export STRIP=$TOOLCHAIN_DIR/bin/i686-linux-android-strip

export LINK=$TOOLCHAIN_DIR/bin/i686-linux-android$API_LEVEL-clang++
export CC=$TOOLCHAIN_DIR/bin/i686-linux-android$API_LEVEL-clang
export CXX=$TOOLCHAIN_DIR/bin/i686-linux-android$API_LEVEL-clang++

export CXXFLAGS='-D_LIBCPP_HAS_NO_OFF_T_FUNCTIONS'

./build-android-node "$1" x86

cd $scriptdir/..
x=$scriptdir/compiled/x86/
mkdir -p $x
cp out/Release/lib/libnode.so $x/
